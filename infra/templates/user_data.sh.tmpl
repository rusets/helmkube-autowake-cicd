#!/usr/bin/env bash
set -euo pipefail

# ---------- base packages ----------
dnf -y update || true
dnf -y install awscli git jq python3 python3-pip --allowerasing || true
python3 -m pip install --quiet --no-cache-dir PyYAML || true

# ---------- k8s sysctl ----------
modprobe br_netfilter || true
modprobe overlay || true
cat >/etc/sysctl.d/99-kubernetes.conf <<'EOF'
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system || true

# ---------- IMDSv2 helpers ----------
TOKEN="$(curl -sS -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600' || true)"
md() { curl -fsS -H "X-aws-ec2-metadata-token: $${TOKEN:-}" "http://169.254.169.254/latest/$1" || true; }

PUB_DNS="$(md meta-data/public-hostname || true)"
PUB_IP_IMDS="$(md meta-data/public-ipv4 || true)"

# Values injected by Terraform (DO NOT escape $${} here — these are Terraform placeholders)
REGION_TF="${region}"
EIP_TF="${eip}"

# Region: if not provided by TF — read from IMDS
if [[ -z "$${REGION_TF}" || "$${REGION_TF}" == "null" ]]; then
  REGION="$(md dynamic/instance-identity/document | jq -r .region)"
else
  REGION="$${REGION_TF}"
fi

# Public IP: prefer TF-provided EIP; otherwise fall back to IMDS
if [[ -n "$${EIP_TF}" && "$${EIP_TF}" != "null" ]]; then
  PUB_IP="$${EIP_TF}"
else
  PUB_IP="$${PUB_IP_IMDS}"
fi

# ---------- install k3s (SAN + external IP) ----------
INSTALL_K3S_EXEC="server --write-kubeconfig-mode=0644"
if [[ -n "$${PUB_DNS}" ]]; then
  INSTALL_K3S_EXEC+=" --tls-san $${PUB_DNS}"
fi
if [[ -n "$${PUB_IP}" ]]; then
  INSTALL_K3S_EXEC+=" --tls-san $${PUB_IP} --node-external-ip $${PUB_IP}"
fi
export INSTALL_K3S_EXEC

curl -sfL https://get.k3s.io | sh -s -

# convenience symlink for kubectl
ln -sf /usr/local/bin/k3s /usr/local/bin/kubectl || true

# ---------- wait API ----------
for _ in $(seq 1 90); do
  if curl -sk https://127.0.0.1:6443/readyz >/dev/null 2>&1; then
    break
  fi
  sleep 2
done

# ---------- sanitize kubeconfig ----------
KCFG="/etc/rancher/k3s/k3s.yaml"
if [[ -s "$${KCFG}" && -n "$${PUB_IP}" ]]; then
  export PUB_IP # make it visible to the embedded Python
  python3 - <<'PY'
import os, yaml, pathlib
eip = os.environ.get("PUB_IP", "")
src = "/etc/rancher/k3s/k3s.yaml"
cfg = yaml.safe_load(open(src))
cfg["clusters"][0]["cluster"]["server"] = f"https://{eip}:6443"
cfg["clusters"][0]["cluster"]["insecure-skip-tls-verify"] = True
cfg["clusters"][0]["cluster"].pop("certificate-authority-data", None)
pathlib.Path("/tmp/kubeconfig-sanitized.yaml").write_text(yaml.safe_dump(cfg, sort_keys=False))
print("Wrote /tmp/kubeconfig-sanitized.yaml")
PY

  # kubeconfig for ec2-user (local copy)
  install -d -m 0755 -o ec2-user -g ec2-user /home/ec2-user/.kube
  install -m 0644 -o ec2-user -g ec2-user /tmp/kubeconfig-sanitized.yaml /home/ec2-user/.kube/config

  # ---------- push to SSM ----------
  if [[ -f /tmp/kubeconfig-sanitized.yaml ]]; then
    aws ssm put-parameter \
      --region "$${REGION}" \
      --name "/helmkube/k3s/kubeconfig" \
      --type "SecureString" \
      --overwrite \
      --value file:///tmp/kubeconfig-sanitized.yaml || true
  fi
fi

echo "[done] k3s ready on $${PUB_IP}:6443"